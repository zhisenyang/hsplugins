using System.Collections.Generic;
using UnityEngine;

namespace RendererEditor
{
    public class ShaderProperty
    {
        public static readonly List<ShaderProperty> properties = new List<ShaderProperty>()
        {
#if HONEYSELECT
            //Color
            new ShaderProperty() {name = "_Color", type = Type.Color},
            new ShaderProperty() {name = "_Color_2", type = Type.Color},
            new ShaderProperty() {name = "_Color_3", type = Type.Color},
            new ShaderProperty() {name = "_Color_4", type = Type.Color},
            new ShaderProperty() {name = "_BaseColor", type = Type.Color},
            new ShaderProperty() {name = "_DiffuseColor", type = Type.Color},
            new ShaderProperty() {name = "_GlassColor", type = Type.Color},
            new ShaderProperty() {name = "_SpecColor", type = Type.Color},
            new ShaderProperty() {name = "_SpecColor_2", type = Type.Color},
            new ShaderProperty() {name = "_SpecColor_3", type = Type.Color},
            new ShaderProperty() {name = "_SpecColor_4", type = Type.Color},
            new ShaderProperty() {name = "_EmissionColor", type = Type.Color},
            new ShaderProperty() {name = "_ReflectionColor", type = Type.Color},
            new ShaderProperty() {name = "_SpecularColor", type = Type.Color},
            new ShaderProperty() {name = "_TintColor", type = Type.Color},
            new ShaderProperty() {name = "_EmisColor", type = Type.Color},
            new ShaderProperty() {name = "_FuzzColor", type = Type.Color},
            //Textures
            new ShaderProperty() {name = "_MainTex", type = Type.Texture},
            new ShaderProperty() {name = "_Albedo2", type = Type.Texture},
            new ShaderProperty() {name = "_SpecGlossMap", type = Type.Texture},
            new ShaderProperty() {name = "_SpecGlossMap2", type = Type.Texture},
            new ShaderProperty() {name = "_Tangent", type = Type.Texture},
            new ShaderProperty() {name = "_BumpMap", type = Type.Texture},
            new ShaderProperty() {name = "_BumpMap2", type = Type.Texture},
            new ShaderProperty() {name = "_OcclusionMap", type = Type.Texture},
            new ShaderProperty() {name = "_SecondaryOcclusionMap", type = Type.Texture},
            new ShaderProperty() {name = "_BlendNormalMap", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormal", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormalMap", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormalMap_2", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormalMap_3", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormalMap_4", type = Type.Texture},
            new ShaderProperty() {name = "_DetailMask", type = Type.Texture},
            new ShaderProperty() {name = "_Thickness", type = Type.Texture},
            new ShaderProperty() {name = "_Colormask", type = Type.Texture},
            new ShaderProperty() {name = "_EffectMap", type = Type.Texture},
            new ShaderProperty() {name = "_OverTex", type = Type.Texture},
            new ShaderProperty() {name = "_MetallicGlossMap", type = Type.Texture},
            new ShaderProperty() {name = "_ParallaxMap", type = Type.Texture},
            new ShaderProperty() {name = "_Transmission", type = Type.Texture},
            new ShaderProperty() {name = "_EmissionMap", type = Type.Texture},
            new ShaderProperty() {name = "_DetailAlbedoMap", type = Type.Texture},
            new ShaderProperty() {name = "_DetailAlbedoMap_2", type = Type.Texture},
            new ShaderProperty() {name = "_DetailAlbedoMap_3", type = Type.Texture},
            new ShaderProperty() {name = "_DetailAlbedoMap_4", type = Type.Texture},
            new ShaderProperty() {name = "_ReflectionTex", type = Type.Texture},
            new ShaderProperty() {name = "_ShoreTex", type = Type.Texture},
            new ShaderProperty() {name = "_DiffuseMapSpecA", type = Type.Texture},
            new ShaderProperty() {name = "_NormalMap", type = Type.Texture},
            new ShaderProperty() {name = "_Illum", type = Type.Texture},
            new ShaderProperty() {name = "_DecalTex", type = Type.Texture},
            new ShaderProperty() {name = "_NoiseTex", type = Type.Texture},
            new ShaderProperty() {name = "_FuzzTex", type = Type.Texture},
            new ShaderProperty() {name = "_ShadowTex", type = Type.Texture},
            new ShaderProperty() {name = "_FalloffTex", type = Type.Texture},
            new ShaderProperty() {name = "_SplatMap", type = Type.Texture},
            new ShaderProperty() {name = "_Overlay", type = Type.Texture},
            //Float
            new ShaderProperty() {name = "_Metallic", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Smoothness", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_OcclusionStrength", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_BlendNormalMapScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailNormalMapScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailNormalMapScale_2", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailNormalMapScale_3", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailNormalMapScale_4", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Cutoff", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Occlusion", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_RimPower", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Refraction", floatRange = new Vector2(0, 9), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_EffectContrast", floatRange = new Vector2(0, 9), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Effect2Power", floatRange = new Vector2(0, 9), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_ColorReverse", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_SpecReverse", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_SmoothTuning", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_LacquerReflection", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_LacquerSmoothness", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Glossiness", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Gloss", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_GlossAniso", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Anisotropy", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_AnisotropyRGContrast", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailIntensity", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_FuzzRange", floatRange = new Vector2(1, 5), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_FuzzBias", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_WrapDiffuse", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_BumpScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Parallax", floatRange = new Vector2(0f, 0.08f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_FresnelScale", floatRange = new Vector2(0.15f, 4), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_GerstnerIntensity", type = Type.Float},
            new ShaderProperty() {name = "_Shininess", floatRange = new Vector2(2, 500), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_InvFade", floatRange = new Vector2(0.01f, 3.0f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_SpecularIntensity", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NormalIntensity", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NormalStrength", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NormalStrength2", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_ThicknessAttenuation", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_TranslucencyDistortion", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_TranslucencyPower", floatRange = new Vector2(1, 20), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_TranslucencyScale", floatRange = new Vector2(0, 20), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_TranslucencyAmbient", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_TransmissionScale", floatRange = new Vector2(0f, 0.08f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_AmbientOcclusionScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Transparency", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_ReflectionEdges", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_ReflectionIntensity", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_BlurReflection", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_HeatTime", floatRange = new Vector2(0, 1.5f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_HeatForce", floatRange = new Vector2(0, 0.1f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_BlockerValue", floatRange = new Vector2(0, 20f), hasFloatRange = true, type = Type.Float},
            //Bools
            new ShaderProperty() {name = "_HairEffect", type = Type.Boolean},
            new ShaderProperty() {name = "_GlossUseAlpha", type = Type.Boolean},
            new ShaderProperty() {name = "_TuningColor21or3", type = Type.Boolean},
            new ShaderProperty() {name = "_TuningSpec21or3", type = Type.Boolean},
            new ShaderProperty() {name = "_TuningSmooth21or3", type = Type.Boolean},
            new ShaderProperty() {name = "_NspecR", type = Type.Boolean},
            new ShaderProperty() {name = "_NColorR", type = Type.Boolean},
            new ShaderProperty() {name = "_DetailMask2", type = Type.Boolean},
            new ShaderProperty() {name = "_skin_effect", type = Type.Boolean},
            new ShaderProperty() {name = "_rimlight", type = Type.Boolean},
            new ShaderProperty() {name = "_ZWrite", type = Type.Boolean},
            new ShaderProperty() {name = "_UseAlbedo2", type = Type.Boolean},
            new ShaderProperty() {name = "_UseOCCLUSION", type = Type.Boolean},
            new ShaderProperty() {name = "_UseOCCLUSION2", type = Type.Boolean},
            new ShaderProperty() {name = "_UseSpecular", type = Type.Boolean},
            new ShaderProperty() {name = "_UseNormal", type = Type.Boolean},
            new ShaderProperty() {name = "_UseDetail", type = Type.Boolean},
            new ShaderProperty() {name = "_UseFuzz", type = Type.Boolean},
            new ShaderProperty() {name = "_LacquerOcc", type = Type.Boolean},
            //Enum
            new ShaderProperty() {name = "_UVSec", enumValues = new Dictionary<int, string>() {{0, "UV0"}, {1, "UV1"}}, type = Type.Enum},
            new ShaderProperty() {name = "_Albedo2UVChannel", enumValues = new Dictionary<int, string>() {{0, "UV1"}, {1, "UV2"}}, type = Type.Enum},
            new ShaderProperty() {name = "_Mode", enumValues = new Dictionary<int, string>(){{0, "Opaque"}, {1, "Cutout"}, {2, "Fade"}, {3, "Transparent"}}, type = Type.Enum},
            new ShaderProperty() {name = "_SrcBlend", enumValues = new Dictionary<int, string>(){{0, "Zero"},{1, "One" },{2, "DstColor" },{3, "SrcColor" },{4, "OneMinusDstColor" },{5, "SrcAlpha" },{6, "OneMinusSrcColor" },{7, "DstAlpha" },{8, "OneMinusDstAlpha" },{9, "SrcAlphaSaturate" },{10, "OneMinusSrcAlpha" }}, enumColumns = 3, type = Type.Enum},
            new ShaderProperty() {name = "_DstBlend", enumValues = new Dictionary<int, string>(){{0, "Zero"},{1, "One" },{2, "DstColor" },{3, "SrcColor" },{4, "OneMinusDstColor" },{5, "SrcAlpha" },{6, "OneMinusSrcColor" },{7, "DstAlpha" },{8, "OneMinusDstAlpha" },{9, "SrcAlphaSaturate" },{10, "OneMinusSrcAlpha" }}, enumColumns = 3, type = Type.Enum},
            //Vector4
            new ShaderProperty() {name = "_UVScroll", type = Type.Vector4},
            new ShaderProperty() {name = "_DetailNormalConvert", type = Type.Vector4},
            new ShaderProperty() {name = "_DistortParams", type = Type.Vector4},
            new ShaderProperty() {name = "_InvFadeParemeter", type = Type.Vector4},
            new ShaderProperty() {name = "_AnimationTiling", type = Type.Vector4},
            new ShaderProperty() {name = "_AnimationDirection", type = Type.Vector4},
            new ShaderProperty() {name = "_BumpTiling", type = Type.Vector4},
            new ShaderProperty() {name = "_BumpDirection", type = Type.Vector4},
            new ShaderProperty() {name = "_WorldLightDir", type = Type.Vector4},
            new ShaderProperty() {name = "_Foam", type = Type.Vector4},
            new ShaderProperty() {name = "_GAmplitude", type = Type.Vector4},
            new ShaderProperty() {name = "_GFrequency", type = Type.Vector4},
            new ShaderProperty() {name = "_GSteepness", type = Type.Vector4},
            new ShaderProperty() {name = "_GSpeed", type = Type.Vector4},
            new ShaderProperty() {name = "_GDirectionAB", type = Type.Vector4},
            new ShaderProperty() {name = "_GDirectionCD", type = Type.Vector4},
#elif AISHOUJO
            //Colors
            new ShaderProperty() {name = "_Color", type = Type.Color},
            new ShaderProperty() {name = "_Color13", type = Type.Color},
            new ShaderProperty() {name = "_Color2", type = Type.Color},
            new ShaderProperty() {name = "_Color3", type = Type.Color},
            new ShaderProperty() {name = "_Color4", type = Type.Color},
            new ShaderProperty() {name = "_Color5", type = Type.Color},
            new ShaderProperty() {name = "_CutoutColor", type = Type.Color},
            new ShaderProperty() {name = "_EmissionColor", type = Type.Color},
            new ShaderProperty() {name = "_FresnelColor", type = Type.Color},
            new ShaderProperty() {name = "_HairBaseColor", type = Type.Color},
            new ShaderProperty() {name = "_MainColor", type = Type.Color},
            new ShaderProperty() {name = "_TintColor", type = Type.Color}, 
            //Textures
            new ShaderProperty() {name = "_NormalTex", type = Type.Texture},
            new ShaderProperty() {name = "_ColorMask", type = Type.Texture},
            new ShaderProperty() {name = "_CutoutTex", type = Type.Texture},
            new ShaderProperty() {name = "_DetailAlbedoMap", type = Type.Texture},
            new ShaderProperty() {name = "_DetailNormalMap", type = Type.Texture},
            new ShaderProperty() {name = "_EmissionMap", type = Type.Texture},
            new ShaderProperty() {name = "_HairBase", type = Type.Texture},
            new ShaderProperty() {name = "_HeightTex", type = Type.Texture},
            new ShaderProperty() {name = "_MainTex", type = Type.Texture},
            new ShaderProperty() {name = "_MatcapTexture", type = Type.Texture},
            new ShaderProperty() {name = "_MetallicGlossMap", type = Type.Texture},
            new ShaderProperty() {name = "_OcclusionMap", type = Type.Texture},
            new ShaderProperty() {name = "_ParallaxMap", type = Type.Texture},
            new ShaderProperty() {name = "_Texture2", type = Type.Texture},
            new ShaderProperty() {name = "_Texture3", type = Type.Texture},
            new ShaderProperty() {name = "_Texture4", type = Type.Texture},
            new ShaderProperty() {name = "_Texture5", type = Type.Texture},
            new ShaderProperty() {name = "_TextureSample0", type = Type.Texture},
            new ShaderProperty() {name = "_TimeMask", type = Type.Texture},
            new ShaderProperty() {name = "_ShadowTex", type = Type.Texture},
            //Floats
            new ShaderProperty() {name = "_AlphaClip", type = Type.Float},
            new ShaderProperty() {name = "_BitangentRim", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_BumpScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Cutoff", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Cutout", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_CutoutScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_CutoutThreshold", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_DetailNormalMapScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Distortion", type = Type.Float},
            new ShaderProperty() {name = "_Emission", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Emissive", type = Type.Float},
            new ShaderProperty() {name = "_Float0", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Float1", type = Type.Float},
            new ShaderProperty() {name = "_FresnelDistort", type = Type.Float},
            new ShaderProperty() {name = "_FresnelPow", type = Type.Float},
            new ShaderProperty() {name = "_FresnelR0", type = Type.Float},
            new ShaderProperty() {name = "_FresnelStr", type = Type.Float},
            new ShaderProperty() {name = "_Glossiness", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_GlossMapScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Height", type = Type.Float},
            new ShaderProperty() {name = "_InvFade", type = Type.Float},
            new ShaderProperty() {name = "_matcapscale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_matcaptilling", type = Type.Float},
            new ShaderProperty() {name = "_Metallic", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NamidaScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NormalMapScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_NormalScale", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_OcclusionStrength", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Parallax", floatRange = new Vector2(0f, 0.08f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_RefractionScale", type = Type.Float},
            new ShaderProperty() {name = "_RefractiveStrength", floatRange = new Vector2(-1, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_ShadowScale", floatRange = new Vector2(0.1f, 0.9f), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Shininess", floatRange = new Vector2(0.01f, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Smoothness", floatRange = new Vector2(0, 1), hasFloatRange = true, type = Type.Float},
            new ShaderProperty() {name = "_Texture4Rotator", type = Type.Float},
            new ShaderProperty() {name = "_UVPannerSpeedx", type = Type.Float},
            new ShaderProperty() {name = "_UVPannerSpeedy", type = Type.Float},
            new ShaderProperty() {name = "_UVPannerTime", type = Type.Float},
            new ShaderProperty() {name = "CullMode", type = Type.Float},
            new ShaderProperty() {name = "DstMode", type = Type.Float},
            new ShaderProperty() {name = "SrcMode", type = Type.Float},
            //Bools
            new ShaderProperty() {name = "_SpecularHighlights", type = Type.Boolean},
            new ShaderProperty() {name = "_UseMainTex", type = Type.Boolean},
            new ShaderProperty() {name = "_WhiteOff", type = Type.Boolean},
            new ShaderProperty() {name = "_UseCutout", type = Type.Boolean},
            new ShaderProperty() {name = "_UseFresnel", type = Type.Boolean},
            new ShaderProperty() {name = "_UseHeight", type = Type.Boolean},
            new ShaderProperty() {name = "_ZWrite", type = Type.Boolean},
            new ShaderProperty() {name = "_ZWriteMode", type = Type.Boolean},
            new ShaderProperty() {name = "_UseAlphaCliping", type = Type.Boolean},
            new ShaderProperty() {name = "_UseBlending", type = Type.Boolean},
            new ShaderProperty() {name = "_UseRefractive", type = Type.Boolean},
            new ShaderProperty() {name = "_UseSoft", type = Type.Boolean},
            new ShaderProperty() {name = "_Float0", type = Type.Boolean},
            new ShaderProperty() {name = "_GlossyReflections", type = Type.Boolean},
            new ShaderProperty() {name = "_SpecularHighlights", type = Type.Boolean},
            //Enums
            new ShaderProperty() {name = "_Mode", enumValues = new Dictionary<int, string>(){{0, "Opaque"}, {1, "Cutout"}, {2, "Fade"}, {3, "Transparent"}}, type = Type.Enum},
            new ShaderProperty() {name = "_SrcBlend", enumValues = new Dictionary<int, string>() {{0, "Zero"},{1, "One"},{2, "DstColor"},{3, "SrcColor"},{4, "OneMinusDstColor"},{5, "SrcAlpha"},{6, "OneMinusSrcColor"},{7, "DstAlpha"},{8, "OneMinusDstAlpha"},{9, "SrcAlphaSaturate"},{10, "OneMinusSrcAlpha"}}, enumColumns = 3, type = Type.Enum},
            new ShaderProperty() {name = "_DstBlend", enumValues = new Dictionary<int, string>() {{0, "Zero"},{1, "One"},{2, "DstColor"},{3, "SrcColor"},{4, "OneMinusDstColor"},{5, "SrcAlpha"},{6, "OneMinusSrcColor"},{7, "DstAlpha"},{8, "OneMinusDstAlpha"},{9, "SrcAlphaSaturate"},{10, "OneMinusSrcAlpha"}}, enumColumns = 3, type = Type.Enum},
            new ShaderProperty() {name = "_SmoothnessTextureChannel", enumValues = new Dictionary<int, string>() {{0, "Metallic Alpha"}, {1, "Albedo Alpha"}}, type = Type.Enum},
            new ShaderProperty() {name = "_CullMode", enumValues = new Dictionary<int, string>() {{0, "Off"}, {1, "Front"}, {2, "Back"}}, type = Type.Enum},
            new ShaderProperty() {name = "_UVSec", enumValues = new Dictionary<int, string>() {{0, "UV0"}, {1, "UV1"}}, type = Type.Enum},
            //Vector4
            new ShaderProperty() {name = "_eyebaseoffset", type = Type.Vector4},
            new ShaderProperty() {name = "_FresnelSetting", type = Type.Vector4},
            new ShaderProperty() {name = "_HeightUVScrollDistort", type = Type.Vector4},
            new ShaderProperty() {name = "_texture2uv", type = Type.Vector4},
            new ShaderProperty() {name = "_texture3uv", type = Type.Vector4},
            new ShaderProperty() {name = "_Texture4UV", type = Type.Vector4},
            new ShaderProperty() {name = "_Texture5UV", type = Type.Vector4},
            new ShaderProperty() {name = "_Vector0", type = Type.Vector4},
#endif
        };

        public enum Type
        {
            Color,
            Texture,
            Float,
            Boolean,
            Enum,
            Vector4
        }

        public string name;
        public Type type;

        public bool hasFloatRange;
        public Vector2 floatRange = new Vector2(0f, 1f);
        public Dictionary<int, string> enumValues;
        public int enumColumns;
    }
}